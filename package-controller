#!/bin/dash

#Copyright (c) 2014 Luigi Tarenga <luigi.tarenga@gmail.com>
#Distributed under the terms of a MIT license.

#
# this script should run on every node that can run a package.
# for each package an instance of package_controller is started on
# selected nodes. when this script detect that the tick of one
# package is not incrementing a race starts after $package_timeout+$pace*3
# seconds and the winner of the race set his own hostname as package
# owner. the package owner is responsible for starting the package
# and monitor it.
# the active node stop the package if not able to get/set values 
# on lite-raft after $package_timeout seconds.
#

PATH=$(dirname $0):$PATH

package=$1
role="stand-by"

configured=false
echo -n "$(date) checking configuration"
while ! $configured ; do
   echo -n .
   sleep 1
   lite-raft-client get packages/$package/tick >/dev/null 2>&1 || lite-raft-client set packages/$package/tick 0 || continue
   lite-raft-client get packages/$package/owner >/dev/null 2>&1 || lite-raft-client set packages/$package/owner "" || continue
   lite-raft-client get packages/$package/timeout >/dev/null 2>&1 || lite-raft-client set packages/$package/timeout 30 || continue
   lite-raft-client get packages/$package/enabled >/dev/null 2>&1 || lite-raft-client set packages/$package/enabled "true" || continue
   configured=true
done
echo " done."

echo -n "$(date) reading package timeout"
while ! package_timeout=$(lite-raft-client get packages/$package/timeout) ; do
   echo -n .
   sleep 1
done
echo " done."

pace=4
timeout=$(($package_timeout+$pace*3))
last_tick=0
last_owner=""

trap 'role="failed"' HUP INT TERM

echo "$(date) starting as stand-by node."
while true ; do
   sleep $pace
   case $role in
    stand-by)
      #if cannot read tick loop again
      tick=$(lite-raft-client get packages/$package/tick) || continue
      if [ $(($tick+0)) -gt $last_tick ] ; then
         #tick incremented so there is an active package-controller
         #pace*3 is a safety misure to let active node to shutdown package
         timeout=$(($package_timeout+$pace*3))
      else
         timeout=$(($timeout-$pace))
      fi
      last_tick=$tick

      #if cannot read owner loop again
      owner=$(lite-raft-client get packages/$package/owner) || continue
      if [ "$owner" = "$HOSTNAME" ] ; then
         lite-raft-client if packages/$package/owner = "$HOSTNAME" set ""
         timeout=$(($package_timeout+$pace*3))
      fi

      if [ "$owner" != "$last_owner" ] ; then
         timeout=$(($package_timeout+$pace*3))
         last_owner="$owner"
      fi

      package_enabled=$(lite-raft-client get packages/$package/enabled) || continue
      if [ "$package_enabled" = "true" -a $timeout -le 0 ] ; then
         echo "$(date) timeout. last_owner ${last_owner:-\"\"}"
         if lite-raft-client if packages/$package/owner = "$last_owner" set "$HOSTNAME" ; then
            echo "$(date) turning to active node."
            role="active"
            timeout=$(($package_timeout+$pace*3))
         fi
      fi

    ;;

    active)
      if tick=$(lite-raft-client get packages/$package/tick) ; then
         timeout=$package_timeout
         tick=$(($tick+1))
         lite-raft-client set packages/$package/tick $tick
      else
         timeout=$(($timeout-$pace))
      fi

      if [ $timeout -le 0 ] ; then
         role=failed
      fi

      owner=$(lite-raft-client get packages/$package/owner) || continue
      package_enabled=$(lite-raft-client get packages/$package/enabled) || continue

      if [ "$package_enabled" = "true" -a "$owner" = "$HOSTNAME" ] ; then
         #run package
         if ! pkg-scripts/$1 status ; then
            echo -n "$(date) starting package. "
            pkg-scripts/$1 start
            echo "done."
         else
            :
         fi
      else
         #stop package
         if pkg-scripts/$1 status ; then
            echo -n "$(date) stopping package. "
            pkg-scripts/$1 stop
            echo "done."
         else
            role="stand-by"
            :
         fi
      fi
      
    ;;

    failed)
      #stop package
      if pkg-scripts/$1 status ; then
         echo -n "$(date) stopping package. "
         pkg-scripts/$1 stop
         echo "done."
      else
         exit 1
      fi
    ;;
   esac
done
